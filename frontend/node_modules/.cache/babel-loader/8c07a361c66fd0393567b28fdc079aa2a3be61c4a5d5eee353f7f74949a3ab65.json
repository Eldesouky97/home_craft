{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AEl_d\\\\Downloads\\\\home_craft\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { auth, googleProvider } from '../config/firebase';\nimport { signInWithPopup, signOut } from 'firebase/auth';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function useAuth() {\n  _s();\n  return useContext(AuthContext);\n}\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // تسجيل باستخدام البريد الإلكتروني وكلمة المرور\n  const register = async userData => {\n    try {\n      const response = await axios.post('/api/auth/register', userData);\n      const {\n        user,\n        token\n      } = response.data;\n      localStorage.setItem('token', token);\n      setCurrentUser(user);\n      return user;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'فشل في إنشاء الحساب');\n    }\n  };\n\n  // تسجيل الدخول باستخدام البريد الإلكتروني وكلمة المرور\n  const login = async (email, password) => {\n    try {\n      const response = await axios.post('/api/auth/login', {\n        email,\n        password\n      });\n      const {\n        user,\n        token\n      } = response.data;\n      localStorage.setItem('token', token);\n      setCurrentUser(user);\n      return user;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'فشل في تسجيل الدخول');\n    }\n  };\n\n  // تسجيل الدخول باستخدام جوجل\n  const loginWithGoogle = async () => {\n    try {\n      const result = await signInWithPopup(auth, googleProvider);\n      const user = result.user;\n\n      // التحقق من وجود المستخدم في قاعدة البيانات\n      const response = await axios.post('/api/auth/google', {\n        uid: user.uid,\n        email: user.email,\n        name: user.displayName,\n        photoURL: user.photoURL\n      });\n      const {\n        user: dbUser,\n        token,\n        requiresRoleSelection\n      } = response.data;\n      if (requiresRoleSelection) {\n        // إذا كان المستخدم جديدًا، نعيده إلى صفحة اختيار الدور\n        localStorage.setItem('pendingUser', JSON.stringify({\n          uid: user.uid,\n          email: user.email,\n          name: user.displayName,\n          photoURL: user.photoURL\n        }));\n        throw new Error('REQUIRES_ROLE_SELECTION');\n      }\n      localStorage.setItem('token', token);\n      setCurrentUser(dbUser);\n      return dbUser;\n    } catch (error) {\n      if (error.message === 'REQUIRES_ROLE_SELECTION') {\n        throw error;\n      }\n      throw new Error('فشل تسجيل الدخول باستخدام جوجل');\n    }\n  };\n\n  // إكمال تسجيل جوجل باختيار الدور\n  const completeGoogleSignUp = async role => {\n    try {\n      const pendingUser = JSON.parse(localStorage.getItem('pendingUser'));\n      if (!pendingUser) {\n        throw new Error('لا توجد بيانات مستخدم معلقة');\n      }\n      const response = await axios.post('/api/auth/google/complete', {\n        uid: pendingUser.uid,\n        email: pendingUser.email,\n        name: pendingUser.name,\n        photoURL: pendingUser.photoURL,\n        role\n      });\n      const {\n        user,\n        token\n      } = response.data;\n      localStorage.removeItem('pendingUser');\n      localStorage.setItem('token', token);\n      setCurrentUser(user);\n      return user;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'فشل في إكمال التسجيل');\n    }\n  };\n\n  // تسجيل الخروج\n  const logout = async () => {\n    try {\n      await signOut(auth);\n      await axios.post('/api/auth/logout');\n    } catch (error) {\n      console.error('Error logging out:', error);\n    } finally {\n      localStorage.removeItem('token');\n      localStorage.removeItem('pendingUser');\n      setCurrentUser(null);\n    }\n  };\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      // جلب بيانات المستخدم من الخادم\n      axios.get('/api/auth/me', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }).then(response => {\n        setCurrentUser(response.data.user);\n      }).catch(() => {\n        localStorage.removeItem('token');\n      }).finally(() => {\n        setLoading(false);\n      });\n    } else {\n      setLoading(false);\n    }\n  }, []);\n  const value = {\n    currentUser,\n    register,\n    login,\n    loginWithGoogle,\n    completeGoogleSignUp,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n}\n_s2(AuthProvider, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","auth","googleProvider","signInWithPopup","signOut","axios","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","register","userData","response","post","user","token","data","localStorage","setItem","error","_error$response","_error$response$data","Error","message","login","email","password","_error$response2","_error$response2$data","loginWithGoogle","result","uid","name","displayName","photoURL","dbUser","requiresRoleSelection","JSON","stringify","completeGoogleSignUp","role","pendingUser","parse","getItem","removeItem","_error$response3","_error$response3$data","logout","console","get","headers","Authorization","then","catch","finally","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/AEl_d/Downloads/home_craft/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { auth, googleProvider } from '../config/firebase';\nimport { signInWithPopup, signOut } from 'firebase/auth';\nimport axios from 'axios';\n\nconst AuthContext = createContext();\n\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n\nexport function AuthProvider({ children }) {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // تسجيل باستخدام البريد الإلكتروني وكلمة المرور\n  const register = async (userData) => {\n    try {\n      const response = await axios.post('/api/auth/register', userData);\n      const { user, token } = response.data;\n      \n      localStorage.setItem('token', token);\n      setCurrentUser(user);\n      \n      return user;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'فشل في إنشاء الحساب');\n    }\n  };\n\n  // تسجيل الدخول باستخدام البريد الإلكتروني وكلمة المرور\n  const login = async (email, password) => {\n    try {\n      const response = await axios.post('/api/auth/login', { email, password });\n      const { user, token } = response.data;\n      \n      localStorage.setItem('token', token);\n      setCurrentUser(user);\n      \n      return user;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'فشل في تسجيل الدخول');\n    }\n  };\n\n  // تسجيل الدخول باستخدام جوجل\n  const loginWithGoogle = async () => {\n    try {\n      const result = await signInWithPopup(auth, googleProvider);\n      const user = result.user;\n      \n      // التحقق من وجود المستخدم في قاعدة البيانات\n      const response = await axios.post('/api/auth/google', {\n        uid: user.uid,\n        email: user.email,\n        name: user.displayName,\n        photoURL: user.photoURL\n      });\n      \n      const { user: dbUser, token, requiresRoleSelection } = response.data;\n      \n      if (requiresRoleSelection) {\n        // إذا كان المستخدم جديدًا، نعيده إلى صفحة اختيار الدور\n        localStorage.setItem('pendingUser', JSON.stringify({\n          uid: user.uid,\n          email: user.email,\n          name: user.displayName,\n          photoURL: user.photoURL\n        }));\n        \n        throw new Error('REQUIRES_ROLE_SELECTION');\n      }\n      \n      localStorage.setItem('token', token);\n      setCurrentUser(dbUser);\n      \n      return dbUser;\n    } catch (error) {\n      if (error.message === 'REQUIRES_ROLE_SELECTION') {\n        throw error;\n      }\n      throw new Error('فشل تسجيل الدخول باستخدام جوجل');\n    }\n  };\n\n  // إكمال تسجيل جوجل باختيار الدور\n  const completeGoogleSignUp = async (role) => {\n    try {\n      const pendingUser = JSON.parse(localStorage.getItem('pendingUser'));\n      \n      if (!pendingUser) {\n        throw new Error('لا توجد بيانات مستخدم معلقة');\n      }\n      \n      const response = await axios.post('/api/auth/google/complete', {\n        uid: pendingUser.uid,\n        email: pendingUser.email,\n        name: pendingUser.name,\n        photoURL: pendingUser.photoURL,\n        role\n      });\n      \n      const { user, token } = response.data;\n      \n      localStorage.removeItem('pendingUser');\n      localStorage.setItem('token', token);\n      setCurrentUser(user);\n      \n      return user;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'فشل في إكمال التسجيل');\n    }\n  };\n\n  // تسجيل الخروج\n  const logout = async () => {\n    try {\n      await signOut(auth);\n      await axios.post('/api/auth/logout');\n    } catch (error) {\n      console.error('Error logging out:', error);\n    } finally {\n      localStorage.removeItem('token');\n      localStorage.removeItem('pendingUser');\n      setCurrentUser(null);\n    }\n  };\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      // جلب بيانات المستخدم من الخادم\n      axios.get('/api/auth/me', {\n        headers: { Authorization: `Bearer ${token}` }\n      })\n      .then(response => {\n        setCurrentUser(response.data.user);\n      })\n      .catch(() => {\n        localStorage.removeItem('token');\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n    } else {\n      setLoading(false);\n    }\n  }, []);\n\n  const value = {\n    currentUser,\n    register,\n    login,\n    loginWithGoogle,\n    completeGoogleSignUp,\n    logout\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}